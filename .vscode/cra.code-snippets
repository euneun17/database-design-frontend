{
  "react-function-component-skeleton": {
    "scope": "typescriptreact",
    "prefix": "rfc",
    "body": [
      "import { FC } from 'react'",
      "import { Root } from './styled'",
      "",
      "type ${TM_FILENAME_BASE}$1Props = {",
      "  className?: string",
      "}",
      "",
      "export const ${TM_FILENAME_BASE}$1: FC<${TM_FILENAME_BASE}$1Props> = ({ className }) => {",
      "  return <Root className={className}>${TM_FILENAME_BASE}$1</Root>",
      "}",
      ""
    ]
  },
  "react-hook-skeleton": {
    "scope": "typescript",
    "prefix": "hook",
    "body": [
      "type ${TM_FILENAME_BASE}$1Props = {",
      "",
      "}",
      "",
      "export const ${TM_FILENAME_BASE}$1 = ({}: ${TM_FILENAME_BASE}$1Props) => {",
      "  return {}",
      "}",
      ""
    ]
  },
  "react-styled-components-skeleton": {
    "scope": "typescript",
    "prefix": "rsc",
    "body": ["import styled from 'styled-components'", "", "export const Root = styled.div``"]
  },
  "api-query-skeleton": {
    "scope": "typescript",
    "prefix": "api-query",
    "body": [
      "import { axiosGET } from 'api/base'",
      "import { generateQueryKey } from 'utils/generateQueryKey'",
      "import { AxiosRequestConfig } from 'axios'",
      "import { QueryClient, useQuery, UseQueryOptions } from 'react-query'",
      "",
      "export type ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType = {}",
      "",
      "export type ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}ResponseType = {}",
      "",
      "const ${TM_FILENAME_BASE}QueryPath = ({$1}: ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType) =>",
      "  `/api/v1/${}`",
      "",
      "const ${TM_FILENAME_BASE} = (params: ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType, config?: AxiosRequestConfig) => {",
      "  return axiosGET<${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType, ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}ResponseType>(",
      "    ${TM_FILENAME_BASE}QueryPath(params),",
      "    params,",
      "    config",
      "  )",
      "}",
      "",
      "export const ${TM_FILENAME_BASE}QueryKey = (params: ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType) =>",
      "`${${TM_FILENAME_BASE}QueryPath(params)}?${generateQueryKey(params)}`",
      "",
      "export const prefetch${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}Query = async (",
      "  queryClient: QueryClient,",
      "  variables: ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType",
      ") => {",
      "  await queryClient.prefetchQuery(${TM_FILENAME_BASE}QueryKey(variables), () =>",
      "    ${TM_FILENAME_BASE}(variables)",
      "  )",
      "",
      "  return queryClient.getQueryState<${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}ResponseType>(${TM_FILENAME_BASE}QueryKey(variables))",
      "}",
      "",
      "export const use${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}Query = ({",
      "  variables,",
      "  options,",
      "  axiosConfig,",
      "}: {",
      "  variables: ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType",
      "  options?: Omit<UseQueryOptions<${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}ResponseType>, 'queryKey' | 'queryFn'>",
      "  axiosConfig?: AxiosRequestConfig",
      "}) => {",
      "  return useQuery<${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}ResponseType>(",
      "    ${TM_FILENAME_BASE}QueryKey(variables),",
      "    () => ${TM_FILENAME_BASE}(variables, axiosConfig),",
      "    options",
      "  )",
      "}",
      ""
    ]
  },
  "api-mutation-skeleton": {
    "scope": "typescript",
    "prefix": "api-mutation",
    "body": [
      "import { axiosPOST } from 'api/base'",
      "import { AxiosRequestConfig } from 'axios'",
      "import { useMutation, UseMutationOptions } from 'react-query'",
      "",
      "export type ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType = {}",
      "",
      "export type ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}ResponseType = {}",
      "",
      "const ${TM_FILENAME_BASE}MutationPath = (param: ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType) => `/api/v1/${}`",
      "",
      "const ${TM_FILENAME_BASE} = (params: ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType, config?: AxiosRequestConfig) => {",
      "  return axiosPOST<${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType, ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}ResponseType>(${TM_FILENAME_BASE}MutationPath(params), params, config)",
      "}",
      "",
      "export const use${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}Mutation = (",
      "  options?: Omit<UseMutationOptions<${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}ResponseType, unknown, ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType>, 'mutationKey' | 'mutationFn'>,",
      "  axiosConfig?: AxiosRequestConfig",
      ") => {",
      "  return useMutation<${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}ResponseType, unknown, ${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}RequestType>(",
      "    (variables) => ${TM_FILENAME_BASE}(variables, axiosConfig),",
      "    options",
      "  )",
      "}"
    ]
  }
}
